{"ast":null,"code":"var TRACE_TAG_REACT_APPS=1<<17;var _asyncCookie=0;export function isEnabled(){return global.nativeTraceIsTracing?global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS):Boolean(global.__RCTProfileIsProfiling);}export function setEnabled(_doEnable){}export function beginEvent(eventName,args){if(isEnabled()){var eventNameString=typeof eventName==='function'?eventName():eventName;global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS,eventNameString,args);}}export function endEvent(args){if(isEnabled()){global.nativeTraceEndSection(TRACE_TAG_REACT_APPS,args);}}export function beginAsyncEvent(eventName,args){var cookie=_asyncCookie;if(isEnabled()){_asyncCookie++;var eventNameString=typeof eventName==='function'?eventName():eventName;global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS,eventNameString,cookie,args);}return cookie;}export function endAsyncEvent(eventName,cookie,args){if(isEnabled()){var eventNameString=typeof eventName==='function'?eventName():eventName;global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS,eventNameString,cookie,args);}}export function counterEvent(eventName,value){if(isEnabled()){var eventNameString=typeof eventName==='function'?eventName():eventName;global.nativeTraceCounter&&global.nativeTraceCounter(TRACE_TAG_REACT_APPS,eventNameString,value);}}if(__DEV__){var Systrace={isEnabled:isEnabled,setEnabled:setEnabled,beginEvent:beginEvent,endEvent:endEvent,beginAsyncEvent:beginAsyncEvent,endAsyncEvent:endAsyncEvent,counterEvent:counterEvent};global[(global.__METRO_GLOBAL_PREFIX__||'')+'__SYSTRACE']=Systrace;}","map":{"version":3,"names":["TRACE_TAG_REACT_APPS","_asyncCookie","isEnabled","global","nativeTraceIsTracing","Boolean","__RCTProfileIsProfiling","setEnabled","_doEnable","beginEvent","eventName","args","eventNameString","nativeTraceBeginSection","endEvent","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","__DEV__","Systrace","__METRO_GLOBAL_PREFIX__"],"sources":["/home/dev-jonathan/Workspace/GoalAppReactNative/node_modules/react-native/Libraries/Performance/Systrace.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport typeof * as SystraceModule from './Systrace';\n\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\n\nlet _asyncCookie = 0;\n\ntype EventName = string | (() => string);\ntype EventArgs = ?{[string]: string};\n\n/**\n * Indicates if the application is currently being traced.\n *\n * Calling methods on this module when the application isn't being traced is\n * cheap, but this method can be used to avoid computing expensive values for\n * those functions.\n *\n * @example\n * if (Systrace.isEnabled()) {\n *   const expensiveArgs = computeExpensiveArgs();\n *   Systrace.beginEvent('myEvent', expensiveArgs);\n * }\n */\nexport function isEnabled(): boolean {\n  return global.nativeTraceIsTracing\n    ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS)\n    : Boolean(global.__RCTProfileIsProfiling);\n}\n\n/**\n * @deprecated This function is now a no-op but it's left for backwards\n * compatibility. `isEnabled` will now synchronously check if we're actively\n * profiling or not. This is necessary because we don't have callbacks to know\n * when profiling has started/stopped on Android APIs.\n */\nexport function setEnabled(_doEnable: boolean): void {}\n\n/**\n * Marks the start of a synchronous event that should end in the same stack\n * frame. The end of this event should be marked using the `endEvent` function.\n */\nexport function beginEvent(eventName: EventName, args?: EventArgs): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);\n  }\n}\n\n/**\n * Marks the end of a synchronous event started in the same stack frame.\n */\nexport function endEvent(args?: EventArgs): void {\n  if (isEnabled()) {\n    global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);\n  }\n}\n\n/**\n * Marks the start of a potentially asynchronous event. The end of this event\n * should be marked calling the `endAsyncEvent` function with the cookie\n * returned by this function.\n */\nexport function beginAsyncEvent(\n  eventName: EventName,\n  args?: EventArgs,\n): number {\n  const cookie = _asyncCookie;\n  if (isEnabled()) {\n    _asyncCookie++;\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginAsyncSection(\n      TRACE_TAG_REACT_APPS,\n      eventNameString,\n      cookie,\n      args,\n    );\n  }\n  return cookie;\n}\n\n/**\n * Marks the end of a potentially asynchronous event, which was started with\n * the given cookie.\n */\nexport function endAsyncEvent(\n  eventName: EventName,\n  cookie: number,\n  args?: EventArgs,\n): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceEndAsyncSection(\n      TRACE_TAG_REACT_APPS,\n      eventNameString,\n      cookie,\n      args,\n    );\n  }\n}\n\n/**\n * Registers a new value for a counter event.\n */\nexport function counterEvent(eventName: EventName, value: number): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceCounter &&\n      global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);\n  }\n}\n\nif (__DEV__) {\n  const Systrace: SystraceModule = {\n    isEnabled,\n    setEnabled,\n    beginEvent,\n    endEvent,\n    beginAsyncEvent,\n    endAsyncEvent,\n    counterEvent,\n  };\n\n  // The metro require polyfill can not have dependencies (true for all polyfills).\n  // Ensure that `Systrace` is available in polyfill by exposing it globally.\n  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;\n}\n"],"mappings":"AAYA,GAAM,CAAAA,oBAAoB,CAAG,CAAC,EAAI,EAAE,CAEpC,GAAI,CAAAC,YAAY,CAAG,CAAC,CAkBpB,MAAO,SAAS,CAAAC,SAASA,CAAA,CAAY,CACnC,MAAO,CAAAC,MAAM,CAACC,oBAAoB,CAC9BD,MAAM,CAACC,oBAAoB,CAACJ,oBAAoB,CAAC,CACjDK,OAAO,CAACF,MAAM,CAACG,uBAAuB,CAAC,CAC7C,CAQA,MAAO,SAAS,CAAAC,UAAUA,CAACC,SAAkB,CAAQ,CAAC,CAMtD,MAAO,SAAS,CAAAC,UAAUA,CAACC,SAAoB,CAAEC,IAAgB,CAAQ,CACvE,GAAIT,SAAS,CAAC,CAAC,CAAE,CACf,GAAM,CAAAU,eAAe,CACnB,MAAO,CAAAF,SAAS,GAAK,UAAU,CAAGA,SAAS,CAAC,CAAC,CAAGA,SAAS,CAC3DP,MAAM,CAACU,uBAAuB,CAACb,oBAAoB,CAAEY,eAAe,CAAED,IAAI,CAAC,CAC7E,CACF,CAKA,MAAO,SAAS,CAAAG,QAAQA,CAACH,IAAgB,CAAQ,CAC/C,GAAIT,SAAS,CAAC,CAAC,CAAE,CACfC,MAAM,CAACY,qBAAqB,CAACf,oBAAoB,CAAEW,IAAI,CAAC,CAC1D,CACF,CAOA,MAAO,SAAS,CAAAK,eAAeA,CAC7BN,SAAoB,CACpBC,IAAgB,CACR,CACR,GAAM,CAAAM,MAAM,CAAGhB,YAAY,CAC3B,GAAIC,SAAS,CAAC,CAAC,CAAE,CACfD,YAAY,EAAE,CACd,GAAM,CAAAW,eAAe,CACnB,MAAO,CAAAF,SAAS,GAAK,UAAU,CAAGA,SAAS,CAAC,CAAC,CAAGA,SAAS,CAC3DP,MAAM,CAACe,4BAA4B,CACjClB,oBAAoB,CACpBY,eAAe,CACfK,MAAM,CACNN,IACF,CAAC,CACH,CACA,MAAO,CAAAM,MAAM,CACf,CAMA,MAAO,SAAS,CAAAE,aAAaA,CAC3BT,SAAoB,CACpBO,MAAc,CACdN,IAAgB,CACV,CACN,GAAIT,SAAS,CAAC,CAAC,CAAE,CACf,GAAM,CAAAU,eAAe,CACnB,MAAO,CAAAF,SAAS,GAAK,UAAU,CAAGA,SAAS,CAAC,CAAC,CAAGA,SAAS,CAC3DP,MAAM,CAACiB,0BAA0B,CAC/BpB,oBAAoB,CACpBY,eAAe,CACfK,MAAM,CACNN,IACF,CAAC,CACH,CACF,CAKA,MAAO,SAAS,CAAAU,YAAYA,CAACX,SAAoB,CAAEY,KAAa,CAAQ,CACtE,GAAIpB,SAAS,CAAC,CAAC,CAAE,CACf,GAAM,CAAAU,eAAe,CACnB,MAAO,CAAAF,SAAS,GAAK,UAAU,CAAGA,SAAS,CAAC,CAAC,CAAGA,SAAS,CAC3DP,MAAM,CAACoB,kBAAkB,EACvBpB,MAAM,CAACoB,kBAAkB,CAACvB,oBAAoB,CAAEY,eAAe,CAAEU,KAAK,CAAC,CAC3E,CACF,CAEA,GAAIE,OAAO,CAAE,CACX,GAAM,CAAAC,QAAwB,CAAG,CAC/BvB,SAAS,CAATA,SAAS,CACTK,UAAU,CAAVA,UAAU,CACVE,UAAU,CAAVA,UAAU,CACVK,QAAQ,CAARA,QAAQ,CACRE,eAAe,CAAfA,eAAe,CACfG,aAAa,CAAbA,aAAa,CACbE,YAAY,CAAZA,YACF,CAAC,CAIDlB,MAAM,CAAC,CAACA,MAAM,CAACuB,uBAAuB,EAAI,EAAE,EAAI,YAAY,CAAC,CAAGD,QAAQ,CAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}